build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build --incompatible_enable_cc_toolchain_resolution

build \
  --@rules_rust//:extra_rustc_flag='-Dfuture-incompatible' \
  --@rules_rust//:extra_rustc_flag='-Dnonstandard-style' \
  --@rules_rust//:extra_rustc_flag='-Wunused' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::complexity' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::suspicious' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::style' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::case_sensitive_file_extension_comparisons' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::cast_lossless' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::cast_possible_wrap' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::checked_conversions' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::cloned_instead_of_copied' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::default_trait_access' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::doc_link_with_quotes' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::doc_markdown' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::enum_glob_use' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::explicit_deref_methods' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::explicit_into_iter_loop' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::flat_map_option' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::implicit_saturating_sub' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::items_after_statements' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::large_types_passed_by_value' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::let_underscore_drop' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::manual_assert' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::map_unwrap_or' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::match_wildcard_for_single_variants' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::mismatching_type_param_order' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::missing_panics_doc' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::needless_pass_by_value' \
  --@rules_rust//:extra_rustc_flag='-Dclippy::cognitive_complexity' \
  --@rules_rust//:extra_rustc_flag='-Wclippy::no_effect_underscore_binding' \
  --@rules_rust//:extra_rustc_flag='-Wclippy::too_many_lines' \

test --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
test --output_groups=+clippy_checks

# TODO: enable when rules_rust cuts a release
# Enable Rust pipelined compilation
build --@rules_rust//rust/settings:pipelined_compilation=true

# Use full target path to generate crate name.
#build --@rules_rust//rust/settings:rename_first_party_crates=true
#build --@rules_rust//rust/settings:use_real_import_macro=true

# Prost require source info.
build --experimental_proto_descriptor_sets_include_source_info

# Support proto3 optionals
build --protocopt=--experimental_allow_proto3_optional

build --incompatible_strict_action_env
#build --nolegacy_external_runfiles

# Warn developers of wrong test size.
test --test_verbose_timeout_warnings

# Prevent PATH polluting test results.
test --test_env=PATH=/usr/bin:/bin:/sbin

# Improve common actions
build --experimental_reuse_sandbox_directories
build --experimental_inprocess_symlink_creation
test --build_tests_only

# Remote cache options
build --experimental_remote_cache_compression
build --experimental_remote_merkle_tree_cache
build --remote_local_fallback
test --cache_test_results

# Don't build runfiles trees
build --nobuild_runfile_links

# Cache action outputs on disk so they persist across output_base and bazel shutdown (eg. changing branches)
build --disk_cache=~/.cache/bazel-disk-cache
# Ensure we can use disk cache together with remote cache
build --incompatible_remote_results_ignore_disk

# Bazel will create symlinks from the workspace directory to output artifacts.
# Build results will be placed in a directory called "dist/bin"
# Other directories will be created like "dist/testlogs"
# Be aware that this will still create a bazel-out symlink in
# your project directory, which you must exclude from version control and your
# editor's search path.
build --symlink_prefix=dist/

# Specifies desired output mode for running tests.
# Valid values are
#   'summary' to output only test status summary
#   'errors' to also print test logs for failed tests
#   'all' to print logs for all tests
#   'streamed' to output logs for all tests in real time
#     (this will force tests to be executed locally one at a time regardless of --test_strategy value).
test --test_output=errors
test --test_summary=detailed --verbose_failures --verbose_test_summary

# Turn off legacy external runfiles
# This prevents accidentally depending on this feature, which Bazel will remove.
#build --nolegacy_external_runfiles

# Always combine coverage report when running tests with coverage enabled.
coverage --instrumentation_filter=//...
coverage --combined_report=lcov

# Load any settings specific to the current user.
# .bazelrc.user should appear in .gitignore so that settings are not shared with team members
# This needs to be last statement in this
# config, as the user configuration should be able to overwrite flags from this file.
# See https://docs.bazel.build/versions/master/best-practices.html#bazelrc
# (Note that we use .bazelrc.user so the file appears next to .bazelrc in directory listing,
# rather than user.bazelrc as suggested in the Bazel docs)
try-import %workspace%/.bazelrc.user
