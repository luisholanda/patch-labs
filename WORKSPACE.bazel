workspace(name = "patch-labs")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# Configure Rust support
http_archive(
    name = "rules_rust",
    sha256 = "950a3ad4166ae60c8ccd628d1a8e64396106e7f98361ebe91b0bcfe60d8e4b60",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.20.0/rules_rust-v0.20.0.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = "2021",
    versions = ["1.68.2"],
)

load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rust_analyzer_dependencies()

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("//third-party/crates:crates.bzl", "crate_repositories")

crate_repositories()

###############
#  Nix Setup  #
###############

git_repository(
    name = "rules_nixpkgs",
    commit = "f80a3b5bd19efa353638cdb0236f6a951cac02b7",
    remote = "https://github.com/tweag/rules_nixpkgs.git",
    shallow_since = "1663761031 +0000",
)

load("@rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

rules_nixpkgs_dependencies(rules_nixpkgs_name = "rules_nixpkgs")

# Configure nixpkgs.
load(
    "@rules_nixpkgs//nixpkgs:nixpkgs.bzl",
    "nixpkgs_local_repository",
    "nixpkgs_package",
)

# Use the same Nixpkgs as the flake.
nixpkgs_local_repository(
    name = "nixpkgs",
    nix_file_content = """
    _: let
        flake = builtins.getFlake (toString ./.);
        baseNixpkgs = flake.inputs.nixpkgs.legacyPackages.${builtins.currentSystem};
    in builtins.foldl'
        (acc: overlay: acc.extend overlay)
        baseNixpkgs
        (builtins.attrValues (flake.overlays or {}))
    """,
    nix_file_deps = [
        "//:flake.lock",
        "//:flake.nix",
    ],
)

#################
#  C/C++ setup  #
#################

load("@rules_nixpkgs//toolchains/cc:cc.bzl", "nixpkgs_cc_configure")

nixpkgs_cc_configure(
    attribute_path = "clang_14",
    nix_file_content = "import <nixpkgs> {}",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "glibc",
    attribute_path = "glibc.dev",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

filegroup(
    name = "headers",
    srcs = glob(["include/**/*"]),
    visibility = ["//visibility:public"]
)
""",
    nix_file_content = "import <nixpkgs> {}",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "libclang",
    attribute_path = "clang_14.cc.lib",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_import")

package(default_visibility = ["//visibility:public"])

alias(
    name = "libclang.so",
    actual = "lib/libclang.so",
)

cc_import(
    name = "libclang",
    shared_library = "lib/libclang.so",
)
    """,
    nix_file_content = "import <nixpkgs> {}",
    repository = "@nixpkgs",
)

######################
#  Protobuf support  #
######################

http_archive(
    name = "rules_proto",
    sha256 = "dc3fb206a2cb3441b485eb1e423165b231235a1ea9b031b4433cf7bc1fa460dd",
    strip_prefix = "rules_proto-5.3.0-21.7",
    urls = [
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/5.3.0-21.7.tar.gz",
    ],
)

http_archive(
    name = "rules_buf",
    sha256 = "523a4e06f0746661e092d083757263a249fedca535bd6dd819a8c50de074731a",
    strip_prefix = "rules_buf-0.1.1",
    urls = [
        "https://github.com/bufbuild/rules_buf/archive/refs/tags/v0.1.1.zip",
    ],
)

load("@rules_buf//buf:repositories.bzl", "rules_buf_dependencies", "rules_buf_toolchains")

rules_buf_dependencies()

rules_buf_toolchains(version = "v1.8.0")

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

# FoundationDB files

FDB_VERSION = "7.1.30"

FDB_DOWNLOAD_URL = "https://github.com/apple/foundationdb/releases/download"

http_file(
    name = "fdbcli",
    downloaded_file_path = "fdbcli",
    executable = True,
    sha256 = "af20f0b8219ec284ecd9fabc74826b404afd5581bf87dde2b048d5fded32cfdd",
    urls = ["{}/{}/fdbcli.x86_64".format(FDB_DOWNLOAD_URL, FDB_VERSION)],
)

http_file(
    name = "libfdb",
    downloaded_file_path = "libfdb_c.so",
    executable = True,
    sha256 = "2af4d714c1e84879393ef4a73c8d1522041af183b97af901e9fd98a17ba583eb",
    urls = ["{}/{}/libfdb_c.x86_64.so".format(FDB_DOWNLOAD_URL, FDB_VERSION)],
)

http_file(
    name = "fdbserver",
    downloaded_file_path = "fdbserver",
    executable = True,
    sha256 = "91b40e5351f1bb0562dad6b9b659b9cb5f25f64a2b0bd8ffd5997e36617ac6d6",
    urls = ["{}/{}/fdbserver.x86_64".format(FDB_DOWNLOAD_URL, FDB_VERSION)],
)
